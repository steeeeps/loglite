<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="System.Configuration.IgnoreSectionHandler, log4net" />
  </configSections>
  <log4net>
    <appender name="ADONetAppender" type="log4net.Appender.ADONetAppender,log4net">
      <!--BufferSize为缓冲区大小-->
      <bufferSize value="2" />

      <!--<param name="BufferSize" value="2" />-->
      <!--引用-->
      <connectionType value="System.Data.SQLite.SQLiteConnection, System.Data.SQLite, Version=1.0.96.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139" />
      <!--连接字符串-->
      <connectionString value="Data Source=log.sqlite" />
      <!--插入语句-->
      <commandText value="insert into LOG (LOGTIME,MESSAGE,USER) Values(@LogTime,@Message,@User);" />
      <commandType value="Text"/>

     
      <!--记录时间-->
      <parameter>
        <parameterName value="@LogTime" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>

      <!--异常消息-->
      <parameter>
        <parameterName value="@Message" />
        <dbType value="String" />
        <layout type="Loglite.LogliteLayout">
          <conversionPattern value="%property{Message}" />
        </layout>
      </parameter>
      

      <parameter>
        <parameterName value="@User" />
        <dbType value="String" />
        <layout type="Loglite.LogliteLayout">
          <conversionPattern value="%property{User}" />
        </layout>
      </parameter>
    </appender>
    <appender name="LogAllToFile" type="log4net.Appender.RollingFileAppender,log4net">
      <!--输出格式
                     每种转换符号都以%开始，后面跟着一个格式符号和换符号。
                     %-数字　：该项的最小长度，小于最小长度的用空格填充
                     %m(message):输出的日志消息
                     %n(new line):换行 
                     %d(datetime):输出当前语句运行的时刻 
                     %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数 
                     %t(thread id):当前语句所在的线程ID 
                     %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等 
                     %c(class):当前日志对象的名称，
                     %L(line )：输出语句所在的行号 
                     %F(file name)：输出语句所在的文件名
                     %logger　日志名称
                 -->
      <param name="File" value="log\"/>
      <param name="AppendToFile" value="true"/>
      <param name="MaxSizeRollBackups" value="100"/>
      <param name="MaximumFileSize" value="1KB"/>
      <param name="StaticLogFileName" value="false"/>
      <param name="DatePattern" value="yyyy-MM-dd&quot;.log&quot;"/>
      <param name="RollingStyle" value="Date"/>
      <layout type="Loglite.LogliteLayout">
        <param name="ConversionPattern" value="记录时间：%date 线程ID:[%thread] 日志级别：%-5level  %n用户：%property{User}  %n日志描述：%property{Message} %n异常信息：%exception%n" />
      </layout>




    </appender>
    <logger name="LogToSqlite">
      <level value="INFO"/>
      <appender-ref ref="ADONetAppender"/>
    </logger>
    <logger name="LogToFile">
      <level value="ALL"/>
      <appender-ref ref="LogAllToFile"/>
    </logger>
    <!--所有logger的基础，root的设置在所有logger中都起作用。 
        当在root和logger中重复设定相同的appender时，你会发现同一日志信息将被记录两次。-->
    <!--<root>
      <level value="ERROR"/>
      -->
    <!--ALL, DEBUG, INFO, WARN, ERROR, FATAL, OFF-->
    <!--
      -->
    <!--<appender-ref ref="LogAllToFile"/>-->
    <!--
      <appender-ref ref="ADONetAppender"/>
    </root>-->
  </log4net>
</configuration>